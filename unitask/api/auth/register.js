import pkg from 'pg';const { Pool } = pkg;import bcrypt from 'bcryptjs';// Initialize database connectionconst pool = new Pool({  connectionString: process.env.DATABASE_URL,  ssl: {    rejectUnauthorized: false  }});// Helper function to execute queriesconst query = async (text, params) => {  const client = await pool.connect();  try {    const result = await client.query(text, params);    return result;  } finally {    client.release();  }};export default async function handler(req, res) {  // Handle OPTIONS request for CORS preflight - this is critical!  if (req.method === 'OPTIONS') {    res.setHeader('Access-Control-Allow-Origin', '*');    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');    return res.status(200).end();  }    // Set CORS headers for all responses  res.setHeader('Access-Control-Allow-Origin', '*');  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');  if (req.method !== 'POST') {    return res.status(405).json({ success: false, message: 'Method not allowed' });  }  try {    const { email, password, displayName, university, location, dateOfBirth, contactNumber } = req.body;        if (!email || !password || !displayName) {      return res.status(400).json({         success: false,         message: 'Missing required fields'       });    }        // Hash password    const salt = await bcrypt.genSalt(10);    const passwordHash = await bcrypt.hash(password, salt);        // Start a transaction    await query('BEGIN');        try {      // Insert user      const userResult = await query(        'INSERT INTO users (email, password_hash, display_name) VALUES ($1, $2, $3) RETURNING id',        [email, passwordHash, displayName]      );            const userId = userResult.rows[0].id;            // Create empty profile      await query(        'INSERT INTO profiles (user_id, location) VALUES ($1, $2)',        [userId, location || '']      );            await query('COMMIT');            res.status(201).json({ success: true, userId });    } catch (error) {      await query('ROLLBACK');            if (error.code === '23505') { // Unique violation        return res.status(400).json({ success: false, message: 'Email already exists' });      }            console.error('Database error:', error);      throw error;    }  } catch (error) {    console.error('Registration error:', error);    res.status(500).json({       success: false,       message: 'Server error during registration',       error: error.message     });  }}
